
# Software Engineering at Google

<h2 style="color:orange"> Preface: Software Engineering Over Time </h2>

##### Summary

In the ever-changing industry, the term "programming" is no longer being refered solely as technical term, but rather the process from start to finish regarding this act of "writing code": building and maintaining the code over time. 

***Key insight***: Software Engineering can been thought of as "programming integrated over time"


There are ***03 questions and priciples*** software engineers should keep in mind:

* Time and Change: How code will need to adapt over the length of its life
* Scale and Growth: How an organization will need to adapt as it evolves
* Trade-offs and Costs: How an organization makes decisions, based on the lessons of Time and Change and Scale and Growth

Throughout this book, we will learn each of this principle in-depth. 

##### Action Items
***How topics covered in the reading can be implemented to the Chasten project***

* We should plan ahead the approach to write our program in a timely manner: well-planned schedule, detailed scope of work, class and team goals
* Strategies to keep track with changes: Because we have a large team of software engineers, there will be time of unexpected change. As we operate on a blame-free environment, we should work on the problem by assigning a group of people to work on fixing the problem in a timely manner. 
* Trade-offs and Costs: We should decide which feature to build, keeping in mind the opportunity cost, technical cost, people cost. etc. 

<h2 style="color:orange"> What is Software Engineering? Beyond just Programming </h2>

##### Summary

At its core, programming is about writing code-creating the algorthms and logic that make a software program work. On the other hand, softare engineering goes beyond coding, it covers the full life cycle of a software system, from idea to production and maintenance. 

##### Three Critical Factors
* Time Dimension: Engineers must not only create code but also maintain it over time. Therefore, the role of a software engineer extend the role of a programmer, looking beyond the immediate problems and solutions.
* Scale and Growth: Software Engineering acknowledges the vast scales of modern applications and technology. The growth and scalability of software systems are integral considerations that go beyond the scope of only programming. 
* Trade-offs: Engineers must weigh various factors and costs, such as financial, resource, engineering effort, and make informed decisions. 

##### Implications for Individual Software Engineers
We should recognize that software engineering entails more than just writing code and solving immediate problems. It involves the ongoing commitment to maintain, improve, and adapt the code over its lifespan.
* Be ready to adapt: Being a software engineer means being prepared to respond to changes in product requirments and technology. 
* Responsibility for Maintenance: Beyond initial program development, engineers should anticipate and embrace their role in maintaining code. They should actively look for problems in the program way before the maintainance phase to save time and cost in the future
* Hyrum's Law: Be aware of unintended consequences of changes

##### Implications for Chasten
While Chasten may not be as extensive as some industrial system, it still benefits from these core principles:
* Time & Change: Consider its potential for extended use within the Department of Computer and Information Science, software engineers should anticipate future maintenance and evolution needs.
* Trade-offs: Balancing the deesire for features and complexity with the need for maintainability and time constraint is key, especially with Chasten, which will be implemented in approximately five weeks. 
* Scalability: There are endless possibilities of how Chasten would be used and scaled. What if other departments or universities express interest? Designing the code and processes with scalability in mind can help you in the long run.

##### Action Items
* Documentation of code and issue
* Testing and Quality Assurance
* Version Control
* Maintain open channels of communication within the team
* Modular Design Practices to make it easier to modify the program without disrupting the entire system.

<h2 style="color:orange"> SE3: Software Engineering is a team endeavor! </h2>

##### Summary

This chapter delves into the infrastructure of a software engineering team. It underscores the pivotal role of teamwork in achieving remarkable results and emphasizes the significance of self-awareness within the team. 

##### The Trade-Offs of Working Alone

One of the challenges in software development is the temptation to work alone, sheltering codes and ideas until they're perceived as perfect. However, this solitary approach has some trade-offs:
* Longer Struggles
* Delayed Error Detection

##### The Collaborative Nirvana
Dealing with social problems can be challenging and unpredictable.To unlock the full potential of teamwork, this chapter introduces three pillars of social interaction:
* Humility: Embracing the fact that everyone has room for improvement paves the way for collective growth. **Failure is an option**
* Respect: Acknowledges the value of each team member and encourages open dialogue and diverse perspectives
* Trust: The belief that others are competent and will do the right thing

##### Action Items
* Regular Team Meetings and Check-Ins
* Peer Mentoring and Knowledge Sharing
* Acknowledge the strength of each team member, celebrate success and learn from failures

# The Fuzzing Book 

<h2 style="color:purple"> Introduction to Software Testing </h2>

In the fast-paced world of software development, ensuring the functionality of your programs is immensely important. In this chapter, we'll delve into the fundamentals of software testing.

##### What does Software Testing Mean?

Sotware Testing is the process of evaluating a program to identify defects and issues. The purposes of software testing are:
* Identifying and fixing bugs early in the process
* Ensuring that the software meets the specified requirements, behaves as expected
* Reducing the risk of software failures in deployment.

##### Testing Strategies

* **Utilizing 'print()' Statement:** One of the most straightforward yet effective debugging techniques is the 'print' statements. This technique involves strategically printing relevant information that provides information into whether the program is running correctly. 
* **Automatic Test Execution and 'assert()' Statement:** By crafting comprehensive test suites with assert statements, you can systematically check if your code behaves correcly.
* **Rounding Error: Introducing Epsilon:** Some programs make exact comparisons challengeing by having float type. To tackle this issue, the concept of "epsilon" is employed, determining whether two floating-point values are considered equal. Developers often check if the absolute difference between the values of floating-point numbers is less than or equal to epsilon. 
* **Generating Tests: Apply Your Test to Thousands of Inputs:** To increase confidence in your software's correctness (and also reduce the time and effort spend testing each input), consider generating tests with a wide range of inputs. 
* **Integrating Checks:** For robust and reliable code, consider integrating checks directly into your functions. You can utilize Assertions to ensure that the inputs and outputs conform to expected behavior.

##### Applications on Chasten

It's a collaborative effort to ensure the software run correctly. After reading this chapter, here are some action items I suggest implementing:
1. Avoid overconfidence in your code and acknowledge that things can go wrong.
2. Rigorous Testing: To ensure the highest quality of your code, run as many tests as possible. 
3. Collaborate and Seek Insights: Consult with Software Quality Assurance engineer and colleagues with diverse and creative perspectives. 

<h2 style="color:purple"> Code Coverage  </h2>

Code coverage is a vital aspect of software testing to provide valuable insights into the effectiveness of test cases and testing efforts. 

##### Summary of Code Coverage
**Code coverage** is a metric used in software testing to measure the extend to which a program's source code is executed by a set of test cases. By tracking which lines of code, branches, and conditions have been executed, it quatifies the coverage of the codebase. 

##### List of Testing Approaches

###### Coverage Class
The Coverage class allows you to measure and report code coverage using a variety of its method.
+ trace() Method: sets up code tracing by reporting data during test execution. 
+ coverage() Method: reports coverage results, indicating which parts of your code were covered. 


###### Testing Approaches
+ Black Box Testing: This approach focuses on evaluating the functionality of software application without knowledge of its internal code and structure. Testers design test cases based on specification and requirements. The primary goal of black box testing is to ensure that the software meets its intended functionality. 
+ White Box Testing: In contrast, white-box testing involves the knowledge of internal code structure and logic. The goal of this approach is to ensure code correctness, coverage and issues related to code structure.
+ Tracing Execution using sys.settrace(): This function allows you to set a trace of function that performs automatically to give inforamtion about certain aspect. Common parameters are "frame","event", and "argument"
+ Fuzzing Test: a testing technique that involves generating a range of random input (could be customized to be mixed character and integer) to uncover defects. 

###### Reflection
As a beginner in programming, I often found myself excited about solcing coding challenges and building software solutions. The satisfation to see my code work sometimes led me to being overconfident in the correctness of my work. After all, if the program executed without immediate errors, it must be fine, right?
However, from time to time, I have been proven wrong as I began working on more complex projects. I started to realize that there was more to ensuring the quality and reliability of my code than just making it run. I discovered that power of "nothing as such as being too careful" with program execution and the invaluable role of code coverage. The logic I applied to solve immediate coding problems was crucial, but it was only part of the software development process. The early detection of issues helps me ensure the quality of the program.


<h2 style="color:purple"> Fuzzing: Breaking Things in Random Input </h2>

Fuzzing is a testing technique that involves generating a range of random input to uncover defects.


###### Benefits of Fuzzing
The fuzzing code generates a diverse range of inputs and delivers them relectlessly to the target application. The goal is to stress-test the software and identify any unexpected vulnerabilities.
Fuzz testing has been identifying various issues, including buffer overflows, crashes, and security vulnerabilities. 

###### Fuzzer and Runner

Fuzzer() is responsible for delivering the diverse set of inputs to the target application. The Fuzzer can be modified to generate only number or characters.

```
import random
def fuzzer(max_length: int=100, char_start: int = 32, char_range: int = 32) -> str:
    """A string of up to `max_length` characters in the range ['char_start','char_start'+ 'char_range']"""
    string_length = random.randrange(0, max_length + 1)
    out = ""
    for i in range(0,string_length):
        out += char(random.randrange(char_start,char_start+char_range))
    return out
```

Runner() is the component responsible for executing the target application with teh generated input. It captures the program's behavisor, logs any crashes and indentifies potential vulnerabilities.

###### Fuzzing External Programs
Setting up fuzz testing for external programs allows for a comprehensive assessment of interconnected systems. This ensures that the program is thouroughly and rigorously tested, helping you uncover vulnerabilities that might go unnoticed.

