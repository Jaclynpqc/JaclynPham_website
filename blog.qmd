
# Software Engineering at Google

<h2 style="color:orange"> Software Engineering @ Google 1: Software Engineering Over Time </h2>

##### Summary

In the ever-changing industry, the term "programming" is no longer being refered solely as technical term, but rather the process from start to finish regarding this act of "writing code": building and maintaining the code over time. 

***Key insight***: Software Engineering can been thought of as "programming integrated over time"


There are ***03 questions and priciples*** software engineers should keep in mind:

* Time and Change: How code will need to adapt over the length of its life
* Scale and Growth: How an organization will need to adapt as it evolves
* Trade-offs and Costs: How an organization makes decisions, based on the lessons of Time and Change and Scale and Growth

Throughout this book, we will learn each of this principle in-depth. 

##### Action Items
***How topics covered in the reading can be implemented to the Chasten project***

* We should plan ahead the approach to write our program in a timely manner: well-planned schedule, detailed scope of work, class and team goals
* Strategies to keep track with changes: Because we have a large team of software engineers, there will be time of unexpected change. As we operate on a blame-free environment, we should work on the problem by assigning a group of people to work on fixing the problem in a timely manner. 
* Trade-offs and Costs: We should decide which feature to build, keeping in mind the opportunity cost, technical cost, people cost. etc. 

<h2 style="color:orange"> Software Engineering @ Google 2: What is Software Engineering? Beyond just Programming </h2>

##### Summary

At its core, programming is about writing code-creating the algorthms and logic that make a software program work. On the other hand, softare engineering goes beyond coding, it covers the full life cycle of a software system, from idea to production and maintenance. 

##### Three Critical Factors
* Time Dimension: Engineers must not only create code but also maintain it over time. Therefore, the role of a software engineer extend the role of a programmer, looking beyond the immediate problems and solutions.
* Scale and Growth: Software Engineering acknowledges the vast scales of modern applications and technology. The growth and scalability of software systems are integral considerations that go beyond the scope of only programming. 
* Trade-offs: Engineers must weigh various factors and costs, such as financial, resource, engineering effort, and make informed decisions. 

##### Implications for Individual Software Engineers
We should recognize that software engineering entails more than just writing code and solving immediate problems. It involves the ongoing commitment to maintain, improve, and adapt the code over its lifespan.
* Be ready to adapt: Being a software engineer means being prepared to respond to changes in product requirments and technology. 
* Responsibility for Maintenance: Beyond initial program development, engineers should anticipate and embrace their role in maintaining code. They should actively look for problems in the program way before the maintainance phase to save time and cost in the future
* Hyrum's Law: Be aware of unintended consequences of changes

##### Implications for Chasten
While Chasten may not be as extensive as some industrial system, it still benefits from these core principles:
* Time & Change: Consider its potential for extended use within the Department of Computer and Information Science, software engineers should anticipate future maintenance and evolution needs.
* Trade-offs: Balancing the deesire for features and complexity with the need for maintainability and time constraint is key, especially with Chasten, which will be implemented in approximately five weeks. 
* Scalability: There are endless possibilities of how Chasten would be used and scaled. What if other departments or universities express interest? Designing the code and processes with scalability in mind can help you in the long run.

##### Action Items
* Documentation of code and issue
* Testing and Quality Assurance
* Version Control
* Maintain open channels of communication within the team
* Modular Design Practices to make it easier to modify the program without disrupting the entire system.

<h2 style="color:orange"> Software Engineering @ Google 3: Software Engineering is a team endeavor! </h2>

##### Summary

This chapter delves into the infrastructure of a software engineering team. It underscores the pivotal role of teamwork in achieving remarkable results and emphasizes the significance of self-awareness within the team. 

##### The Trade-Offs of Working Alone

One of the challenges in software development is the temptation to work alone, sheltering codes and ideas until they're perceived as perfect. However, this solitary approach has some trade-offs:
* Longer Struggles
* Delayed Error Detection

##### The Collaborative Nirvana
Dealing with social problems can be challenging and unpredictable.To unlock the full potential of teamwork, this chapter introduces three pillars of social interaction:
* Humility: Embracing the fact that everyone has room for improvement paves the way for collective growth. **Failure is an option**
* Respect: Acknowledges the value of each team member and encourages open dialogue and diverse perspectives
* Trust: The belief that others are competent and will do the right thing

##### Action Items
* Regular Team Meetings and Check-Ins
* Peer Mentoring and Knowledge Sharing
* Acknowledge the strength of each team member, celebrate success and learn from failures

<h2 style="color:orange"> Software Engineering @ Google 4: Knowledge Sharing </h2>

##### Summary

The chapter "Knowledge Sharing" from the book "Software Engineering at Google" illuminates the vital aspects of effective team communication and knowledge distribution within a software engienering environment. Central to the chapter is teh creation of a supportive work atmosphere where team members feel comfortable expressing ideas. making mistakes, and learnign collaboratively. It emphasizes the importance of dismantling infomration, addressing data fragmentation, and combating the fear of "haunted graveyard" code. The chapter stresses the significance of uniform knowledge distribution to prevent inconsistencies within the team, thus enhancing efficiency and preventing setbakcs caused by the sudden unavailability of key individuals.

##### Reflection

This chapter's highlights problem also relate to our challenge with team-work in Chaste. A significant challenge we face is the struggle to share vital information, and each software engineer lack connection with each other. This chapter's teaching us in real-world context, emphasizes the urgency of finding creative and proactive solutions to enhance out communication and collaboration.

##### Action Items
* Form Collaborative Teams: Our strength is communicating in small teams, hence we should form focused team and work collaboratively to solve each individual issues.
* Establishing a centralized knowledge repository
* Continuous Feedback Loops

<h2 style="color:orange"> Software Engineering @ Google 5: Engineering for Equity </h2>

##### Summary

The chapter "Engineering for Equity" from the book "Software Engineering at Google" sheds light on the pervasive issues of unconscious bias in engineering. These biases often lead to the creation of products that cater to a specific group, leaving out diverse perspectives and needs. One striking example discussed is the development of tools ar AI training models that disadvantage people of color. The chapter emphasizes the importance of understanding how products can either advantage or disadvantage certain groups, highlightling the need for a comprehensive approach to tackle these multifaceted challenges.

The chapter suggests several strategies to address these biases effectively. Here are some suggestions: 
* Improve engineers knowledge of diversity
* Making them aware of the biases 
* Understanding the diverse needs of users
* Rejecting singular approaches
* Ensuring diverse representation at the management level. 

##### Reflection

In previous chapter, we explored the multifaceted role of a software engineer- as an individual, as a team player, as a learner. However, in this chaper, the spotlight shifts to the engineers as a catalyst for change in promoting diversity and inclusivity. The chapter encapsulates this role with a statement: "When engineering does not focus on users of different nationalities, ethnicities, races, genders, ages, socioeconomic statuses, abilities, and belief systems, even the most talented staff will inadvertently fail their users.". This statement underscore the essence of the software engineer's responsibility to craft products that resonate with the diverse tapestry of humanity. 

This realization ties back to the core purpose of software engineering -to create impactful and useful product that enhance people's lives. It highlights that the essence of technology progress lies not only in innovation but also in empathy, understanding, and inclusion.

##### Action Items for Chasten
User Research: Comprehensively research users from diverse backgrounds will help us understand their unique needs, challenges, and expectations to inform the product development process

<h2 style="color:orange"> Software Engineering @ Google 6: How to Lead a Team </h2>

##### Summary
In the chapter <How to Lead a Team>[https://abseil.io/resources/swe-book/html/ch05.html] from the book **Software Engineering at Google**, several positive patterns for successful leadership and management are discussed, alongside some negative patterns of being the manager. The chapter also highlights the distinct difference and responsbilities between a manager and tech lead (TL).

To be a successful leading person, one should: 
* Lose the Ego: Cultivate humility, trust and respect within the team
* Be a Zen Master: Maintain calm and composure, especially during challenging situations
* Be a Catalyst: Encourage collaboration and cooperation, removing roadblocks to ensure team's progress
* Be a Teacher and a Mentor: Balance teaching with allowing team members to learn on their own
* Set Clear Goals: Define a clear mission statement and goals for the team
* Be Honest: Provide honest feedback, be kind and empathetic
* Track Happiness: Regularly gauge your team members'happiness and well-being

In contrast, there is a series of negative patterns to avoid as a leader: 
* Hire Pushovers:  Hiring people who aren't as smart or ambitious as you are. Though it would cement your position as a team leader, productivity will crush the moment you leave the room. 
* Ignore Low Performers
* Ignore Human Issues
* Be Everyone's Friend: Don't confuse friendship with leading with a soft touch
* Compromise the Hiring Bar
* Treat Your Team like Children

##### Action Items for Chasten
Applying these principles to Chasten, where rotational leader groups are implemented every week, can significantly enhance team dynamics and productivity. Setting clear goals during the sprint planning session is essential. Define the objectives, roles and responsibilities clearly to avoid confusion and promote a cohesive effort.

<h2 style="color:orange"> Software Engineering @ Google 7: Leading at Scale </h2>

##### Summary
The chapter <Leading at Scale>[https://abseil.io/resources/swe-book/html/ch06.html] from the book **Software Engineering at Google** sheds light on the challenges on the leadership journey and provides invaluable insights into effective leading strategies. 

##### Effective Leadership Strategies
* Always Be Deciding: Prompt decision-making is crucial. Leaders should weight trade-offs, through immediate obvious or long-term. 
* Always Be Leaving: Building an autonomous organization is key. Leaders must create a self-sustaining structure within their teams, enabling the gradual resolution of ambiguous problems without constance intervention, liberating leaders to focus on strategic tasks and providing opportunities for others to level up. 
* Always Be Scaling: The bittersweet truth of successful leadership is that the team will take on more responsbilities and problems. At this point, the leader must manage the scalling effectively with their scarce resources of time, energy and attention.

##### Reflection
One of the profound insights from the chapter is that leadership is 95% about observation. Effective leaders keenly observe their teams, identify hidden issues and devise solutions to address these challenges.
Additionally, the chapter also addresses the imposter syndrome, a common affliction among leaders, can be mitigated by adopting the mindset of temporarily substituting for an expect. By removing personal stakes, leaders can grant themselces the freedome to fail, leadn, and grow.

##### Application on Chasten
In our software engineer organixation, team memebrs often face new challenged that evoke fear of failure, especially if their evaluations are at stake. As a leader, addressing this freeze response is pivotal to nurturing a proactive and resilient team. 


# The Fuzzing Book 

<h2 style="color:purple"> Fuzzing Book 1: Introduction to Software Testing </h2>

In the fast-paced world of software development, ensuring the functionality of your programs is immensely important. In this chapter, we'll delve into the fundamentals of software testing.

##### What does Software Testing Mean?

Software Testing is the process of evaluating a program to identify defects and issues. The purposes of software testing are:
* Identifying and fixing bugs early in the process
* Ensuring that the software meets the specified requirements, behaves as expected
* Reducing the risk of software failures in deployment.

##### Testing Strategies

* **Utilizing 'print()' Statement:** One of the most straightforward yet effective debugging techniques is the 'print' statements. This technique involves strategically printing relevant information that provides information into whether the program is running correctly. 
* **Automatic Test Execution and 'assert()' Statement:** By crafting comprehensive test suites with assert statements, you can systematically check if your code behaves correcly.
* **Rounding Error: Introducing Epsilon:** Some programs make exact comparisons challengeing by having float type. To tackle this issue, the concept of "epsilon" is employed, determining whether two floating-point values are considered equal. Developers often check if the absolute difference between the values of floating-point numbers is less than or equal to epsilon. 
* **Generating Tests: Apply Your Test to Thousands of Inputs:** To increase confidence in your software's correctness (and also reduce the time and effort spend testing each input), consider generating tests with a wide range of inputs. 
* **Integrating Checks:** For robust and reliable code, consider integrating checks directly into your functions. You can utilize Assertions to ensure that the inputs and outputs conform to expected behavior.

##### Applications on Chasten

It's a collaborative effort to ensure the software run correctly. After reading this chapter, here are some action items I suggest implementing:
1. Avoid overconfidence in your code and acknowledge that things can go wrong.
2. Rigorous Testing: To ensure the highest quality of your code, run as many tests as possible. 
3. Collaborate and Seek Insights: Consult with Software Quality Assurance engineer and colleagues with diverse and creative perspectives. 

<h2 style="color:purple"> Fuzzing Book 2: Code Coverage  </h2>

Code coverage is a vital aspect of software testing to provide valuable insights into the effectiveness of test cases and testing efforts. 

##### Summary of Code Coverage
**Code coverage** is a metric used in software testing to measure the extend to which a program's source code is executed by a set of test cases. By tracking which lines of code, branches, and conditions have been executed, it quatifies the coverage of the codebase. 

##### List of Testing Approaches

###### Coverage Class
The Coverage class allows you to measure and report code coverage using a variety of its method.
+ trace() Method: sets up code tracing by reporting data during test execution. 
+ coverage() Method: reports coverage results, indicating which parts of your code were covered. 


###### Testing Approaches
+ Black Box Testing: This approach focuses on evaluating the functionality of software application without knowledge of its internal code and structure. Testers design test cases based on specification and requirements. The primary goal of black box testing is to ensure that the software meets its intended functionality. 
+ White Box Testing: In contrast, white-box testing involves the knowledge of internal code structure and logic. The goal of this approach is to ensure code correctness, coverage and issues related to code structure.
+ Tracing Execution using sys.settrace(): This function allows you to set a trace of function that performs automatically to give inforamtion about certain aspect. Common parameters are "frame","event", and "argument"
+ Fuzzing Test: a testing technique that involves generating a range of random input (could be customized to be mixed character and integer) to uncover defects. 

###### Reflection
As a beginner in programming, I often found myself excited about solcing coding challenges and building software solutions. The satisfation to see my code work sometimes led me to being overconfident in the correctness of my work. After all, if the program executed without immediate errors, it must be fine, right?
However, from time to time, I have been proven wrong as I began working on more complex projects. I started to realize that there was more to ensuring the quality and reliability of my code than just making it run. I discovered that power of "nothing as such as being too careful" with program execution and the invaluable role of code coverage. The logic I applied to solve immediate coding problems was crucial, but it was only part of the software development process. The early detection of issues helps me ensure the quality of the program.


<h2 style="color:purple"> Fuzzing Book 3: Breaking Things in Random Input </h2>

Fuzzing is a testing technique that involves generating a range of random input to uncover defects.


###### Benefits of Fuzzing
The fuzzing code generates a diverse range of inputs and delivers them relectlessly to the target application. The goal is to stress-test the software and identify any unexpected vulnerabilities.
Fuzz testing has been identifying various issues, including buffer overflows, crashes, and security vulnerabilities. 

###### Fuzzer and Runner

Fuzzer() is responsible for delivering the diverse set of inputs to the target application. The Fuzzer can be modified to generate only number or characters.

```
import random
def fuzzer(max_length: int=100, char_start: int = 32, char_range: int = 32) -> str:
    """A string of up to `max_length` characters in the range ['char_start','char_start'+ 'char_range']"""
    string_length = random.randrange(0, max_length + 1)
    out = ""
    for i in range(0,string_length):
        out += char(random.randrange(char_start,char_start+char_range))
    return out
```

Runner() is the component responsible for executing the target application with teh generated input. It captures the program's behavisor, logs any crashes and indentifies potential vulnerabilities.

###### Fuzzing External Programs
Setting up fuzz testing for external programs allows for a comprehensive assessment of interconnected systems. This ensures that the program is thouroughly and rigorously tested, helping you uncover vulnerabilities that might go unnoticed.

<h2 style="color:purple"> Fuzzing Book 4: Mutation Analysis </h2>

Mutation analysis is a sophisticate technique, which injects artificial faults into the code and scrutinizes how test suites responds. Utilizing mutation analysis, developers gain invaluable insights into the efficacy of their tests. This blog post navigates the intricate world of mutation anlysis, revealing its principles, challenges, and real-world applications.

###### Benefits of Mutation Analysis
**Test Suit Effectiveness Assessment**
Mutation analysis evaluates the quality of the test suite by introducing artificial faults into the code. It helps developers understand how well your tests can detect these injected errors, providing insights into the thoroughness of your testing efforts
Mutation analysis can be used as an indicator of test suit effectiveness. The more mutants killed by tests, the better the test suite.
**Identifying Weaknesses**
By pinpointing specific areas where your tests fail to catch mutations, mutation analysis highlights weaknesses in your code. This information is invaluable for strengthening your test cases and improving overall code quality. 

###### Real-World Application on Chasten Program
In our Chasten project, mutation analysis could be applied by purposely injecting false XPath pattern to test the analyze feature's ability to detect the bugs. 

<h2 style="color:purple"> Fuzzing Book 5: Mutation-Based Fuzzing </h2>
Mutation-based fuzzing is a software tesing technique used to discover vulnerabilities or bugs in programs, especially in softwrae that parses complex inputs. Fuzzing involves feedding a program with a large amount of randomly generated or mutated data to trigger unexpected behavior. 

###### The process of mutation-based fuzzing
1. **Input Generation** - Fuzzer general initial inputs either randomly or from existing valid inputs. These inputs can be in various formats.
2. **Mutation** - Fuzzer mutates mutates the generated inputs to create new,slightly modified inputs. The idea is to explore different way the program approach the bugs to uncover potential vulnerabilities.
3. **Input Execution** -The mutated inputs are fed into the target program. The program's behavior is monitored and analyzed.
4. **Error Detection** -If the program exibits abnormal behavior, the fuzzer detects these errors and logs the input that caused the issue

###### Application on Chasten
Mutation-based fuzzing can be applied to test a software tool that checks XPath expressions, like Chasten, by generating a variety of mutated XPath expressions and feeding them into the tool to uncover potential vulnerabilities.
The mutated inputs can start with a set of valid XPath expressions taht the software tool should accept, and then be mutated through different ways, such as delete random character, insert random characters or flip random characters. 

<h2 style="color:purple"> Fuzzing Book 6: Fuzzing with Grammar </h2>

<h2 style="color:purple"> Fuzzing Book 7: Efficient Grammar Fuzzing </h2>
This chaper presents the problem with traditional method of grammar fuzzer and propose a new solution to better control and increase efficiency in the code. 

###### Limitaions of Simple Grammar Fuzzer
`simple_grammar_fuzzer()` can be remarkably inefficient, especially when dealing with large grammars and complex language structures. These inefficiencies become apparent as the function has to iterate over teh generated string, searching for symbols ot expand. Additionally, controlling the output size is problematic, leading to the generation of excessively long strings even with limitations in place. 

###### The Three-Phase Expansion Approach
To address the limitation of conventional grammar fuzzing, a new approach has been developed, employing a three-phase expansion method encapsulated within a function called `expand_tree()`. 

This approach significantly improves the efficiency of test generation. By organizing the expansion process into well-defined phases, the function efficiently controls the output size and enhances the speed of the test generation process. This method is able to produce smaller inputs, optimizing the testing process further. 

###### Application on Chasten
For a tool that checks XPATH expressions, applying the three-phase expansion approach would create a highly efficient testing tool. The expand_tree function can be customized to handle XPATH grammar, enabling the generation of diverse and complex XPATH expressions for testing. 
By employing this strategy, the tool can quickly explore various parts of the grammar, ensuring comprehensive test coverage. This optimized testing approach not only improves the speed of test generatoin but also enhances the quality of the test cases produced, leading the more robust and reliable XPATH expression checking tools. 